#include <og3d.h>


/********************************************************/

og3d::og3d(){}


/********************************************************/

og3d::og3d(vector<_vertex3f> &v, vector<_vertex3i> &c){

	vertices = v;
	caras = c;
}

/********************************************************/

vector<_vertex3f> & og3d::getvertices(){

	return vertices;
}

/********************************************************/

vector<_vertex3i> & og3d::getcaras(){

	return caras;
}

/********************************************************/

void og3d::setvertices(int pos, int num_vert, float f){

	if (pos%3 == 0)	
		vertices[num_vert].x = f;
	else{
		if (pos%3 == 1)
			vertices[num_vert].y = f;
		else
			vertices[num_vert].z = f;
	}
}

/********************************************************/

void og3d::setcaras(int pos, int i, int pto){

	if(pos%3 == 0)
		caras[i].x = pto;
	else{
		if(pos%3 == 1)
			caras[i].y = pto;
		else
			caras[i].z = pto;
	}
}

/********************************************************/

void og3d::resizevertices(int m){

	vertices.resize(m);
}

/********************************************************/

void og3d::resizecaras(int m){

	caras.resize(m);
}

/********************************************************/

//**************************************************************************
// Funcion para dibujar vertices
//***************************************************************************

void og3d::draw_vertices()
{
	
	glColor3f(0,1,0);
	glPointSize(7);

	glBegin(GL_POINTS);
	for(unsigned i = 0; i < vertices.size(); i++){			
		glVertex3f(vertices.at(i).x, vertices.at(i).y, vertices.at(i).z);
	}
	glEnd();
	
}

//**************************************************************************
// Funcion para dibujar alambres
//***************************************************************************

void og3d::draw_alambres(int a, int b, int c)
{
	
	glColor3f(a,b,c);
	glPointSize(2);
	int v1, v2, v3;

	glBegin(GL_LINES);
	for(unsigned i = 0; i < caras.size(); i++){
		v1 = caras.at(i).x;
		v2 = caras.at(i).y;
		v3 = caras.at(i).z;	

		
		int vert[3] = {v1, v2, v3};	
		for(int j = 0; j < 3; j++){
			if(j == 2){
				glVertex3f(vertices.at(vert[j]).x, vertices.at(vert[j]).y, vertices.at(vert[j]).z);
				glVertex3f(vertices.at(vert[j-2]).x, vertices.at(vert[j-2]).y, vertices.at(vert[j-2]).z);
			}
			else{
				glVertex3f(vertices.at(vert[j]).x, vertices.at(vert[j]).y, vertices.at(vert[j]).z);
				glVertex3f(vertices.at(vert[j+1]).x, vertices.at(vert[j+1]).y, vertices.at(vert[j+1]).z);
			}
		}
			
	}
	glEnd();
		
}

void og3d::draw_alambres2()
{
	
	glColor3f(0,1,0);
	glPointSize(2);
	int v1, v2, v3;

	glBegin(GL_LINES);
	for(unsigned i = 0; i < caras.size(); i++){
		v1 = caras.at(i).x;
		v2 = caras.at(i).y;
		v3 = caras.at(i).z;	

		
		int vert[3] = {v1, v2, v3};			
		for(int j = 0; j < 3; j++){
			if(vertices.at(vert[j]).x > 0 && vertices.at(vert[j]).x){ // solo mostramos las caras que estan en el lado positivo del eje x
				if(j == 2){
					glVertex3f(vertices.at(vert[j]).x, vertices.at(vert[j]).y, vertices.at(vert[j]).z);
					glVertex3f(vertices.at(vert[j-2]).x, vertices.at(vert[j-2]).y, vertices.at(vert[j-2]).z);
				}
				else{
					glVertex3f(vertices.at(vert[j]).x, vertices.at(vert[j]).y, vertices.at(vert[j]).z);
					glVertex3f(vertices.at(vert[j+1]).x, vertices.at(vert[j+1]).y, vertices.at(vert[j+1]).z);
				}
			}
		}
			
	}
	glEnd();
		
}

//**************************************************************************
// Funcion para dibujar caras (liso)
//***************************************************************************

void og3d::draw_caras_liso()
{
	
	glPointSize(2);
	glColor3f(0,0,1);
	int v1, v2, v3;

	glBegin(GL_TRIANGLES);
	for(unsigned i = 0; i < caras.size(); i++){
		v1 = caras.at(i).x;
		v2 = caras.at(i).y;
		v3 = caras.at(i).z;			
					
		glVertex3f(vertices.at(v1).x, vertices.at(v1).y, vertices.at(v1).z);

		glVertex3f(vertices.at(v2).x, vertices.at(v2).y, vertices.at(v2).z);

		glVertex3f(vertices.at(v3).x, vertices.at(v3).y, vertices.at(v3).z);
		
	}
	glEnd();
		
}


//**************************************************************************
// Funcion para dibujar caras (ajedrez)
//***************************************************************************
void og3d::draw_caras_ajedrez()
{
	
	glPointSize(2);
	int v1, v2, v3;

	glBegin(GL_TRIANGLES);
	for(unsigned i = 0; i < caras.size(); i++){
        if(i%2 == 0)
			glColor3f(0,0,1);
		else
			glColor3f(0.5,0.5,0.5);

		v1 = caras.at(i).x;
		v2 = caras.at(i).y;
		v3 = caras.at(i).z;	
					
		glVertex3f(vertices.at(v1).x, vertices.at(v1).y, vertices.at(v1).z);

		glVertex3f(vertices.at(v2).x, vertices.at(v2).y, vertices.at(v2).z);

		glVertex3f(vertices.at(v3).x, vertices.at(v3).y, vertices.at(v3).z);
		
	}
	glEnd();
		
}


void og3d::draw_caras_ajedrez2()
{
	
	glPointSize(2);
	int v1, v2, v3;
	vector<_vertex3i> vaux, vaux2;

	glBegin(GL_TRIANGLES);
	for(unsigned i = 0; i < caras.size(); i++){
		if(i%1 == 0)
			glColor3f(0,0,1);
		else
			glColor3f(0.5,0.5,0.5);

		v1 = caras.at(i).x;
		v2 = caras.at(i).y;
		v3 = caras.at(i).z;	

		if(vertices.at(v1).x > 0 && vertices.at(v2).x && vertices.at(v3).x){	 // solo mostramos las caras que estan en el lado positivo del eje x	
					
			glVertex3f(vertices.at(v1).x, vertices.at(v1).y, vertices.at(v1).z);

			glVertex3f(vertices.at(v2).x, vertices.at(v2).y, vertices.at(v2).z);

			glVertex3f(vertices.at(v3).x, vertices.at(v3).y, vertices.at(v3).z);
		}
		
	}
	glEnd();
		
}

/********************************************************/

void og3d::crear_revolucion(int n, int num_grados){
		
        int tam_perfil = vertices.size(), k = 0, cont;
		_vertex3f vaux;
        _vertex3i vaux2;
        vector<int> vcar;
        vector<_vertex3f> v;


        /* Compruebo que vertices son los que estan sobre el eje de rotación */
        for(int i = 0; i < vertices.size(); i++)
            if(vertices[i].x == 0)
                vcar.push_back(i);


        /* Creamos todos los vertices */
        for(int i = 0; i < n-1; i++){
            for(int j = (tam_perfil * i); j < tam_perfil + k; j++){
                if(vertices[j].x != 0){
                    vaux.x = (vertices[j].x * cos((((2*PI)*num_grados)/360)/(float)n)) + (vertices[j].z * sin((((2*PI)*num_grados)/360)/(float)n));
                    vaux.y = vertices[j].y;
                    vaux.z = (-vertices[j].x * sin((((2*PI)*num_grados)/360)/(float)n)) + (vertices[j].z * cos((((2*PI)*num_grados)/360)/(float)n));
					
                    vertices.push_back(vaux);
                    k++;
                }
            }
        }


        /* Creamos todas las caras */
 /*       caras.clear(); //para eliminar la que metimos por defecto al leer el ply
        for(int i = 0; i < n-1; i++){
            for(int j = (tam_perfil * i); j < (tam_perfil - 1) + (tam_perfil * i); j++){
                vaux2.x = j;
                vaux2.y = j + 1;
                vaux2.z = vaux2.y + tam_perfil;

                caras.push_back(vaux2);

                vaux2.x = vaux2.z;
                vaux2.y = vaux2.x - 1;
                vaux2.z = j;

                caras.push_back(vaux2);
            }
        }


        /* Unimos los ultimos vertices con los primeros en el caso de que el giro sea completo */
/*        int tam_vertices = vertices.size();
        if(num_grados == 360){
            for(int i = tam_vertices - tam_perfil; i < tam_vertices - 1; i++){
                vaux2.x = i;
                vaux2.y = i + 1;
                vaux2.z = (vaux2.y + tam_perfil)%tam_vertices;

                caras.push_back(vaux2);

                vaux2.x = vaux2.z;
                vaux2.y = vaux2.x - 1;
                vaux2.z = i;

                caras.push_back(vaux2);
            }
        }


        /* Elimino las caras que tenga dos veces el mismo punto que se encuentra sobre el eje de rotación */
/*        int m;
        if(num_grados == 360)
            m = n;
        else
            m = n - 1;

        for(int i = 0; i < vcar.size(); i++){
            for(int k = 0, t = vcar[i]; k < m; k++, t += tam_perfil){
                for(int j = 0; j < caras.size(); j++){
                    if(caras[j].z == t)
                        caras.erase(caras.begin() + j);
                }
            }
        }


        /* Los puntos repetidos los simplifico al único que debe estar */
 /*       for(int i = 0; i < vcar.size(); i++){
            for(int k = 0, t = vcar[i] + tam_perfil; k < m - 1; k++, t += tam_perfil){
                for(int j = 0; j < caras.size(); j++){
                    if(caras[j].x == t)
                        caras[j].x = vcar[i];
                }
            }
        }


        if(vcar.size() > 0){
            for(int i = 1, k = 1; i < n; i++, k += 2){
                for(int j = 0; j < caras.size(); j++){
                    if((caras[j].x > tam_perfil) && (caras[j].x <= (tam_perfil * (i + 1))))
                            caras[j].x -= k;

                    if((caras[j].y > tam_perfil) && (caras[j].y <= (tam_perfil * (i + 1))))
                            caras[j].y -= k;

                    if((caras[j].z > tam_perfil) && (caras[j].z <= (tam_perfil * (i + 1))))
                            caras[j].z -= k;
                }
            }
        }


        for(int i = 0; i < tam_perfil; i++)
            v.push_back(vertices[i]);

        int esta = 0;
        for(int i = tam_perfil; i < vertices.size(); i++){
            for(int j = 0; j < tam_perfil; j++)
                if(vertices[i].y == v[j].y){
                    cout << "igual" << endl;
                    esta = 1;
                }

            if(esta == 0)
                v.push_back(vertices[i]);

            esta = 0;
        }
*/
        cout << vertices.size() << endl;
        for(int i = 0; i < caras.size(); i++)
            cout << caras[i].x << "-" << caras[i].y << "-" << caras[i].z << endl;


}

/********************************************************/

void og3d::vector_normal_caras(){

		_vertex3f p0, p1, p2, vA, vB;	
		struct normal v;

		for(int m = 0; m < caras.size(); m++){
			v.px = caras[m].x;
			v.py = caras[m].y;
			v.pz = caras[m].z;
			
			p0 = vertices[caras[m].x];
			p1 = vertices[caras[m].y];
			p2 = vertices[caras[m].z]; 

			vA.x = p1.x - p0.x;
			vA.y = p1.y - p0.y;
			vA.z = p1.z - p0.z;

			vB.x = p2.x - p0.x;
			vB.y = p2.y - p0.y;
			vB.z = p2.z - p0.z;

			//cálculo del producto vectorial entre vA y vB
			v.normal_cara.x = (vA.y*vB.z) - (vB.y*vA.z);
			v.normal_cara.y = - ((vA.x*vB.z) - (vB.x*vA.z));
			v.normal_cara.z = (vA.x*vB.y) - (vB.x*vA.y);			

			normales_caras.push_back(v);

		}
}


/********************************************************/

void og3d::vector_normal_puntos(){

		int cont = 0;
		_vertex3f aux;
		
		for(int m = 0; m < vertices.size(); m++){
			for(int n = 0; n < normales_caras.size(); n++){
				if((m == normales_caras[n].px) || (m == normales_caras[n].py) || (m == normales_caras[n].pz)){
					aux.x += normales_caras[n].normal_cara.x;
					aux.y += normales_caras[n].normal_cara.y;
					aux.z += normales_caras[n].normal_cara.z;

					cont++;
				}
			}

			aux.x = aux.x/cont;
			aux.y = aux.y/cont;
			aux.z = aux.z/cont;

			normales_puntos.push_back(aux);

			cont = 0;
			aux.x = aux.y = aux.z = 0.0;
			
		}
}
			

