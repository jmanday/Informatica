

 ///package practica2;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */


import java.awt.Color;
import java.awt.Component;
import java.awt.Shape;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.net.MalformedURLException;
import java.rmi.Naming;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map.Entry;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import javax.swing.Timer;

/**
 *
 * @author jesus
 */
public class algoritmoDistribuido extends javax.swing.JFrame{

     
    private ServidorInterface serv;
    private Component confirmation;
    
    /**
     * Creates new form interfaz_grafica
     */
    public algoritmoDistribuido() {
        this.setTitle("Algoritmo Distribuido");
        this.setLocation(350, 200);
        initComponents();
        finalizar.setVisible(false);
        obtenerServidor();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        proceso2 = new javax.swing.JButton();
        proceso1 = new javax.swing.JButton();
        proceso3 = new javax.swing.JButton();
        proceso5 = new javax.swing.JButton();
        proceso4 = new javax.swing.JButton();
        proceso6 = new javax.swing.JButton();
        iniciar = new javax.swing.JButton();
        finalizar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        proceso2.setText("Proceso2");
        proceso2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                proceso2ActionPerformed(evt);
            }
        });

        proceso1.setText("Proceso1");
        proceso1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                proceso1ActionPerformed(evt);
            }
        });

        proceso3.setText("Proceso3");
        proceso3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                proceso3ActionPerformed(evt);
            }
        });

        proceso5.setText("Proceso5");
        proceso5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                proceso5ActionPerformed(evt);
            }
        });

        proceso4.setText("Proceso4");
        proceso4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                proceso4ActionPerformed(evt);
            }
        });

        proceso6.setText("Proceso6");
        proceso6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                proceso6ActionPerformed(evt);
            }
        });

        iniciar.setText("Iniciar");
        iniciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iniciarActionPerformed(evt);
            }
        });

        finalizar.setText("Finalizar");
        finalizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                finalizarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(85, 85, 85)
                .addComponent(proceso1, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(proceso4, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(96, 96, 96))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(184, 184, 184)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(proceso2, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(proceso6, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(111, 111, 111)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(proceso5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(proceso3, javax.swing.GroupLayout.DEFAULT_SIZE, 87, Short.MAX_VALUE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(281, 281, 281)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(finalizar, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(iniciar, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(183, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(proceso2)
                    .addComponent(proceso3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 68, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(proceso1)
                    .addComponent(proceso4))
                .addGap(69, 69, 69)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(proceso6)
                    .addComponent(proceso5))
                .addGap(43, 43, 43)
                .addComponent(iniciar)
                .addGap(9, 9, 9)
                .addComponent(finalizar)
                .addContainerGap())
        );

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    public void obtenerServidor(){
        try {
            int PuertoRMI = 1099;
            String nombreHost = "localhost";

            /**
            * Construir el registroURL, para el protcolo rmi, concatenando en
            * un "string" el identificador del proceso, el numero de
            * puerto y, al final, el nombre simbolico del servicio que se
            * implementa con del objeto distribuido.
            */
            String registroURL = "rmi://" + nombreHost + ":" + PuertoRMI + "/servidor";

            /**
            * Encontrar el objeto remoto (lookup) en servicio de nombres
            * (Naming) del registro RMI y transmitirlo a un objeto de la
            * interfaz remota ("ProcesoInterface")
            */
            serv = (ServidorInterface) Naming.lookup(registroURL);
                
        } catch (NotBoundException ex) {
            Logger.getLogger(algoritmoDistribuido.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(algoritmoDistribuido.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(algoritmoDistribuido.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    
    public void actualizarTestigo(ProcesoInterface p) throws RemoteException{
        
        int num, j = p.getID();
        
        proceso1.setBackground(Color.LIGHT_GRAY);
        proceso2.setBackground(Color.LIGHT_GRAY);
        proceso3.setBackground(Color.LIGHT_GRAY);
        proceso4.setBackground(Color.LIGHT_GRAY);
        proceso5.setBackground(Color.LIGHT_GRAY);
        proceso6.setBackground(Color.LIGHT_GRAY);
        
        /* El proceso que tenia el testigo cambia de color */
        switch(j){
            case 0:
                proceso1.setBackground(Color.RED);
                break;
            case 1:
                proceso2.setBackground(Color.RED);
                break;
            case 2:
                proceso3.setBackground(Color.RED);
                break;
            case 3:
                proceso4.setBackground(Color.RED);
                break;
            case 4:
                proceso5.setBackground(Color.RED);
                break;
            case 5:
                proceso6.setBackground(Color.RED);
                break;
            default:
                break;
        }
        
        num = j + 1;
        
        System.out.println("El testigo ha sido otorgado al proceso" + num);
    }
     
     
    
    private void iniciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iniciarActionPerformed
               
        iniciar.setVisible(false);
        finalizar.setVisible(true);
        
        try {
            // TODO add your handling code here:
            /* Asignamos de forma aleatoria por primera vez el testigo */
            int i, numAleatorio = (int) (Math.random()*6+1);
            
            for(i = 0; i < 6; i++){
                Proceso proc = new Proceso(i, this);
                serv.conectarse(proc);
            }
            
            
            switch(numAleatorio){
                case 1:
                    /* le asignamos el testigo */
                    System.out.println("Testigo asignado al proceso1");                    
                    proceso1.setBackground(Color.red);
                    serv.asignarTestigo(0); 
                    
                    break;
                    
                case 2:
                    /* le asignamos el testigo */
                    System.out.println("Testigo asignado al proceso2");                    
                    proceso2.setBackground(Color.red);
                    serv.asignarTestigo(1);
                    
                    break;
                    
                case 3:
                    /* le asignamos el testigo */
                    System.out.println("Testigo asignado al proceso3");                    
                    proceso3.setBackground(Color.red);
                    serv.asignarTestigo(2);
                    
                    break;
                    
                case 4:
                    /* le asignamos el testigo */
                    System.out.println("Testigo asignado al proceso4");
                    proceso4.setBackground(Color.red);
                    serv.asignarTestigo(3);
                    
                    break;
                    
               case 5:
                    /* le asignamos el testigo */
                    System.out.println("Testigo asignado al proceso5");                    
                    proceso5.setBackground(Color.red);
                    serv.asignarTestigo(4);
                    
                    break;
                   
               case 6:
                    /* le asignamos el testigo */
                    System.out.println("Testigo asignado al proceso6");                    
                    proceso6.setBackground(Color.red);
                    serv.asignarTestigo(5);
                    
                    break;
                   
               default:
                   break;
                    
            }
            
        } catch (RemoteException ex) {
            ex.printStackTrace();
        }
        
    }//GEN-LAST:event_iniciarActionPerformed

    private void proceso6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_proceso6ActionPerformed
           
        System.out.println("El proceso6 solicita el testigo.");
        try { 
            serv.solicitarTestigo(5);
        } catch (RemoteException ex) {
            Logger.getLogger(algoritmoDistribuido.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_proceso6ActionPerformed

        
    private void proceso5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_proceso5ActionPerformed
    
        System.out.println("El proceso5 solicita el testigo.");
        try { 
            serv.solicitarTestigo(4);
        } catch (RemoteException ex) {
            Logger.getLogger(algoritmoDistribuido.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_proceso5ActionPerformed

    
    
    private void proceso1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_proceso1ActionPerformed
        // TODO add your handling code here:
        System.out.println("El proceso1 solicita el testigo.");
        try { 
            serv.solicitarTestigo(0);
        } catch (RemoteException ex) {
            Logger.getLogger(algoritmoDistribuido.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_proceso1ActionPerformed

    
    private void proceso2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_proceso2ActionPerformed
        // TODO add your handling code here:
        System.out.println("El proceso2 solicita el testigo.");
        try { 
            serv.solicitarTestigo(1);
        } catch (RemoteException ex) {
            Logger.getLogger(algoritmoDistribuido.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_proceso2ActionPerformed

    
    private void proceso3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_proceso3ActionPerformed
        // TODO add your handling code here:
        System.out.println("El proceso3 solicita el testigo.");
        try { 
            serv.solicitarTestigo(2);
        } catch (RemoteException ex) {
            Logger.getLogger(algoritmoDistribuido.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_proceso3ActionPerformed

    
    
    private void proceso4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_proceso4ActionPerformed
        // TODO add your handling code here:
        System.out.println("El proceso4 solicita el testigo.");
        try { 
            serv.solicitarTestigo(3);
        } catch (RemoteException ex) {
            Logger.getLogger(algoritmoDistribuido.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_proceso4ActionPerformed

    private void finalizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_finalizarActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_finalizarActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {                                   
        // TODO add your handling code here:
        /* Como por defecto al realizar este evento el jframe se cierra, pues lo cambiamos para que no se cierre */
        setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE); 
      
        Object [] opciones ={"Aceptar","Cancelar"};
        
        int eleccion = JOptionPane.showOptionDialog(confirmation,"¿Desea cerrar la aplicacion?","Mensaje de Confirmacion",
        JOptionPane.YES_NO_OPTION,
        JOptionPane.QUESTION_MESSAGE,null,opciones,"Cancelar");
        if (eleccion == JOptionPane.YES_OPTION){
            
            dispose();
        }
        else{
            
        }
        
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(algoritmoDistribuido.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(algoritmoDistribuido.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(algoritmoDistribuido.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(algoritmoDistribuido.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new algoritmoDistribuido().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton finalizar;
    private javax.swing.JButton iniciar;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton proceso1;
    private javax.swing.JButton proceso2;
    private javax.swing.JButton proceso3;
    private javax.swing.JButton proceso4;
    private javax.swing.JButton proceso5;
    private javax.swing.JButton proceso6;
    // End of variables declaration//GEN-END:variables
    
}
