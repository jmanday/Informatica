 ///package practica2;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */


import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.net.MalformedURLException;
import java.rmi.Naming;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map.Entry;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import javax.swing.Timer;
import practica2.mensaje;

/**
 *
 * @author jesus
 */
public class chat extends javax.swing.JFrame {

    private int puerto;
    private ServidorInterface serv;
    private String host;   
    private Component confirmation;
    private JTextArea display;
    
    /**
     * Creates new form interfaz_grafica
     */
    public chat() {
        lista_usuarios = new JList();
        mensajes = new JList();
        this.setLocation(350, 200);
        initComponents();
        obtenerServidor();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel_superior = new javax.swing.JPanel();
        nombre_usuario = new javax.swing.JTextField();
        boton_conectar = new javax.swing.JButton();
        segundo_panel = new javax.swing.JPanel();
        conectados = new javax.swing.JLabel();
        escribir_mensaje = new javax.swing.JTextField();
        boton_enviar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        lista_usuarios = new javax.swing.JList();
        panel_mensajes = new javax.swing.JScrollPane();
        mensajes = new javax.swing.JList();
        nickname = new javax.swing.JLabel();
        chat_privado = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        boton_conectar.setText("Conectarse");
        boton_conectar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton_conectarActionPerformed(evt);
            }
        });

        conectados.setText("          usuarios conectados");

        boton_enviar.setText("Enviar");
        boton_enviar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton_enviarActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(lista_usuarios);

        panel_mensajes.setViewportView(mensajes);

        javax.swing.GroupLayout segundo_panelLayout = new javax.swing.GroupLayout(segundo_panel);
        segundo_panel.setLayout(segundo_panelLayout);
        segundo_panelLayout.setHorizontalGroup(
            segundo_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(segundo_panelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(segundo_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(segundo_panelLayout.createSequentialGroup()
                        .addComponent(escribir_mensaje, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33)
                        .addComponent(boton_enviar, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(segundo_panelLayout.createSequentialGroup()
                        .addComponent(panel_mensajes)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(segundo_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(conectados, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, segundo_panelLayout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(29, 29, 29))))))
        );
        segundo_panelLayout.setVerticalGroup(
            segundo_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(segundo_panelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(segundo_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(segundo_panelLayout.createSequentialGroup()
                        .addComponent(conectados)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(panel_mensajes))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                .addGroup(segundo_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(escribir_mensaje, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(boton_enviar))
                .addGap(20, 20, 20))
        );

        nickname.setFont(new java.awt.Font("Cantarell", 3, 12)); // NOI18N

        chat_privado.setText("Privado");
        chat_privado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chat_privadoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panel_superiorLayout = new javax.swing.GroupLayout(panel_superior);
        panel_superior.setLayout(panel_superiorLayout);
        panel_superiorLayout.setHorizontalGroup(
            panel_superiorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_superiorLayout.createSequentialGroup()
                .addGroup(panel_superiorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panel_superiorLayout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(nombre_usuario, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)
                        .addComponent(boton_conectar)
                        .addGap(18, 18, 18)
                        .addComponent(nickname, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(panel_superiorLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(segundo_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chat_privado, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(47, 47, 47))
        );
        panel_superiorLayout.setVerticalGroup(
            panel_superiorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_superiorLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(panel_superiorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nickname, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panel_superiorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(nombre_usuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(boton_conectar)))
                .addGroup(panel_superiorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel_superiorLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(segundo_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(panel_superiorLayout.createSequentialGroup()
                        .addGap(103, 103, 103)
                        .addComponent(chat_privado)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );

        getContentPane().add(panel_superior, java.awt.BorderLayout.PAGE_START);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void obtenerServidor(){
        try {
            int PuertoRMI = 1099;
            String nombreHost = "localhost";

            /**
            * Construir el registroURL, para el protcolo rmi, concatenando en
            * un "string" el nombre de la maquina servidora, el numero de
            * puerto y, al final, el nombre simbolico del servicio que se
            * implementa con del objeto distribuido.
            */
            String registroURL = "rmi://" + nombreHost + ":" + PuertoRMI + "/servidor";

            /**
            * Encontrar el objeto remoto (lookup) en servicio de nombres
            * (Naming) del registro RMI y transmitirlo a un objeto de la
            * interfaz remota ("chatInterface")
            */
            serv = (ServidorInterface) Naming.lookup(registroURL);
                
        } catch (NotBoundException ex) {
            Logger.getLogger(chat.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(chat.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(chat.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    
    private void boton_enviarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton_enviarActionPerformed
        // TODO add your handling code here:
        try {            
            
            if(nickname.getText().isEmpty()){
                JOptionPane.showMessageDialog(null, "Debe conectarse primero");
            }            
            else{
                if(escribir_mensaje.getText().isEmpty()){
                    JOptionPane.showMessageDialog(null, "Debe escribir el texto a enviar");
                }
                else{
                    ClienteInterface cli = serv.obtenerCliente(nickname.getText());
                    serv.enviarMensaje(cli,escribir_mensaje.getText());
                    escribir_mensaje.setText("");
                }
            }

        }
        catch (Exception ex){
            System.out.println("Excepcion en el Chat: " + nickname.getText());    
            ex.printStackTrace();
        }
    }//GEN-LAST:event_boton_enviarActionPerformed
    
    
    public void actualizarListaConectados(ArrayList<ClienteInterface> lista) throws RemoteException{
        DefaultListModel modeloLista = new DefaultListModel();
               
        modeloLista.clear();
        for(int i = 0; i < lista.size(); i++)
            modeloLista.addElement(lista.get(i).getNombre()); 
        
        lista_usuarios.setModel(modeloLista);   
        lista_usuarios.repaint(); 
    }
    
    
    public void actualizarMensajes(ArrayList<mensaje> aux) throws RemoteException{
        DefaultListModel modeloLista2 = new DefaultListModel();
        
        modeloLista2.clear();
        for(int i = 0; i < aux.size(); i++)
            modeloLista2.addElement(aux.get(i).getNombreUsuario() + " dijo: " + aux.get(i).getMensajeUsuario());   
        
        mensajes.setModel(modeloLista2);
        mensajes.repaint();    
    }
    
    
    private void boton_conectarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton_conectarActionPerformed
        // TODO add your handling code here:
        /* Si no ha escrito nada en el campo de texto correspondiente, saldrá una ventana de advertencia */
        if(nombre_usuario.getText().isEmpty()){
                JOptionPane.showMessageDialog(null, "Debe introducir un alias");
        }
        else{
            if(nickname.getText().isEmpty() == false){
                JOptionPane.showMessageDialog(null, "Solo puede haber una sesion por chat");
                nombre_usuario.setText("");                
            }
            else{
                try {
                                
                    /* Nos creamos una nueva instancia de cliente */
                    Cliente cli = new Cliente(nombre_usuario.getText(), this);
                
                    /* A la instancia del servidor le digo que me quiero conectar */
                    if(serv.conectarse(cli) == false){
                        JOptionPane.showMessageDialog(null, "Ese nick ya esta siendo usado");
                        nombre_usuario.setText("");
                    }
                    else{
                        nickname.setText(nombre_usuario.getText());
                        nombre_usuario.setText("");
                    }                            
                }
                catch (Exception e){
                    System.out.println("Excepcion en el ClienteChat: " + e);
                    e.printStackTrace();
                }
            }
        }
    }//GEN-LAST:event_boton_conectarActionPerformed
  
    
    private void chat_privadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chat_privadoActionPerformed
        // TODO add your handling code here:
        if(lista_usuarios.isSelectionEmpty()){
            JOptionPane.showMessageDialog(null, "Debe seleccionar un usuario");
        }
        else{
            if(nickname.getText().equals(lista_usuarios.getSelectedValue().toString())){
                JOptionPane.showMessageDialog(null, "No puede abrir una ventana con usted mismo");
            }
            else {
                try {
                    ClienteInterface client = serv.obtenerCliente(nickname.getText());
                    ClienteInterface client2 = serv.obtenerCliente((String)lista_usuarios.getSelectedValue().toString());
                    chat_privado msn = new chat_privado(client,client2);;
                    client.iniciarSesion(client2);
                    client2.iniciarSesion(client);
                } catch (RemoteException ex) {
                    Logger.getLogger(chat.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_chat_privadoActionPerformed

    
     
            
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        /* Como por defecto al realizar este evento el jframe se cierra, pues lo cambiamos para que no se cierre */
        setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE); 
      
        Object [] opciones ={"Aceptar","Cancelar"};
        
        int eleccion = JOptionPane.showOptionDialog(confirmation,"¿Desea cerrar la aplicacion?","Mensaje de Confirmacion",
        JOptionPane.YES_NO_OPTION,
        JOptionPane.QUESTION_MESSAGE,null,opciones,"Cancelar");
        if (eleccion == JOptionPane.YES_OPTION){
            try {
                serv.desconectarse(nickname.getText());
            } catch (RemoteException ex) {
                Logger.getLogger(chat.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            //System.exit(0);
            dispose();
        }
        else{
            
        }
        
    }//GEN-LAST:event_formWindowClosing

    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(chat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(chat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(chat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(chat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new chat().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton boton_conectar;
    private javax.swing.JButton boton_enviar;
    private javax.swing.JButton chat_privado;
    private javax.swing.JLabel conectados;
    private javax.swing.JTextField escribir_mensaje;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList lista_usuarios;
    private javax.swing.JList mensajes;
    private javax.swing.JLabel nickname;
    private javax.swing.JTextField nombre_usuario;
    private javax.swing.JScrollPane panel_mensajes;
    private javax.swing.JPanel panel_superior;
    private javax.swing.JPanel segundo_panel;
    // End of variables declaration//GEN-END:variables
}
